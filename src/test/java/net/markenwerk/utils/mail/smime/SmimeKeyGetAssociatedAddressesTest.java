/*
 * Copyright (c) 2015 Torsten Krause, Markenwerk GmbH.
 * 
 * This file is part of 'A S/MIME library for JavaMail', hereafter
 * called 'this library', identified by the following coordinates:
 * 
 *    groupID: net.markenwerk
 *    artifactId: utils-mail-smime
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 * 
 * See the LICENSE and NOTICE files in the root directory for further
 * information.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test aman15thMaygitlab using AI Type  and AI Model 

ROOST_METHOD_HASH=getAssociatedAddresses_1a9629a2f0
ROOST_METHOD_SIG_HASH=getAssociatedAddresses_47a5f767c1

"""
Scenario 1: Test to check if getAssociatedAddresses returns the correct email addresses.

Details:  
  TestName: testGetAssociatedAddressesReturnsCorrectEmails
  Description: This test is meant to check if the getAssociatedAddresses method correctly extracts and returns the email addresses associated with the certificate.
Execution:
  Arrange: Create a mock SmimeKey object with a known certificate that has specific email addresses in its distinguished name.
  Act: Invoke the getAssociatedAddresses method on the mock SmimeKey object.
  Assert: Compare the returned list of email addresses with the known list of email addresses associated with the certificate.
Validation: 
  This assertion verifies that the getAssociatedAddresses method correctly extracts and returns the email addresses associated with the certificate. This test is significant as it ensures the correct functionality of the method, which is crucial for the application's email handling logic.

Scenario 2: Test to check if getAssociatedAddresses handles null certificate correctly.

Details:  
  TestName: testGetAssociatedAddressesHandlesNullCertificate
  Description: This test is meant to check if the getAssociatedAddresses method correctly handles a null certificate.
Execution:
  Arrange: Create a mock SmimeKey object with a null certificate.
  Act: Invoke the getAssociatedAddresses method on the mock SmimeKey object.
  Assert: Check that the returned list of email addresses is empty.
Validation: 
  This assertion verifies that the getAssociatedAddresses method correctly handles a null certificate by returning an empty list. This test is significant as it checks the method's robustness against null inputs, which is important for the application's stability.

Scenario 3: Test to check if getAssociatedAddresses handles empty distinguished name correctly.

Details:  
  TestName: testGetAssociatedAddressesHandlesEmptyDistinguishedName
  Description: This test is meant to check if the getAssociatedAddresses method correctly handles a certificate with an empty distinguished name.
Execution:
  Arrange: Create a mock SmimeKey object with a certificate that has an empty distinguished name.
  Act: Invoke the getAssociatedAddresses method on the mock SmimeKey object.
  Assert: Check that the returned list of email addresses is empty.
Validation: 
  This assertion verifies that the getAssociatedAddresses method correctly handles a certificate with an empty distinguished name by returning an empty list. This test is significant as it checks the method's robustness against certificates with empty distinguished names, which could occur in real-world situations.

Scenario 4: Test to check if getAssociatedAddresses returns an unmodifiable list.

Details:  
  TestName: testGetAssociatedAddressesReturnsUnmodifiableList
  Description: This test is meant to check if the getAssociatedAddresses method correctly returns an unmodifiable list.
Execution:
  Arrange: Create a mock SmimeKey object with a known certificate that has specific email addresses in its distinguished name.
  Act: Invoke the getAssociatedAddresses method on the mock SmimeKey object and attempt to modify the returned list.
  Assert: Check that an UnsupportedOperationException is thrown.
Validation: 
  This assertion verifies that the getAssociatedAddresses method correctly returns an unmodifiable list, ensuring that the list cannot be accidentally modified elsewhere in the code. This test is significant as it ensures the integrity of the returned data.
"""
*/

// ********RoostGPT********

package net.markenwerk.utils.mail.smime;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.mockito.Mockito;
import java.math.BigInteger;
import java.security.*;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.*;
import java.security.Principal;
import java.security.PrivateKey;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class SmimeKeyGetAssociatedAddressesTest {
    private SmimeKey smimeKey;
    private X509Certificate certificate;
    @Before
    public void setUp() throws NoSuchAlgorithmException, CertificateException, NoSuchProviderException, SignatureException, InvalidKeyException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        X500Name dnName = new X500Name("CN=Test, O=Test, OU=Test, L=Test, ST=Test, C=Test, E=test@test.com");
        BigInteger certSerialNumber = new BigInteger(Long.toString(System.currentTimeMillis()));
        Date startDate = new Date();
        Date endDate = new Date(System.currentTimeMillis() + 365 * 24 * 60 * 60 * 1000);
        certificate = new JcaX509v3CertificateBuilder(dnName, certSerialNumber, startDate, endDate, dnName, keyPair.getPublic())
                .build(new JcaContentSignerBuilder("SHA256WithRSAEncryption").setProvider(new BouncyCastleProvider()).build(keyPair.getPrivate()));
        smimeKey = new SmimeKey(keyPair.getPrivate(), certificate);
    }
    @Test
    @Category(Categories.valid.class)
    public void testGetAssociatedAddressesReturnsCorrectEmails() {
        List<String> emails = smimeKey.getAssociatedAddresses();
        assertEquals(1, emails.size());
        assertEquals("test@test.com", emails.get(0));
    }
    @Test
    @Category(Categories.invalid.class)
    public void testGetAssociatedAddressesHandlesNullCertificate() {
        SmimeKey mockSmimeKey = Mockito.mock(SmimeKey.class);
        Mockito.when(mockSmimeKey.getCertificate()).thenReturn(null);
        List<String> emails = mockSmimeKey.getAssociatedAddresses();
        assertTrue(emails.isEmpty());
    }
    @Test
    @Category(Categories.invalid.class)
    public void testGetAssociatedAddressesHandlesEmptyDistinguishedName() throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        X500Name dnName = new X500Name("");
        BigInteger certSerialNumber = new BigInteger(Long.toString(System.currentTimeMillis()));
        Date startDate = new Date();
        Date endDate = new Date(System.currentTimeMillis() + 365 * 24 * 60 * 60 * 1000);
        X509Certificate emptyDnCertificate = new JcaX509v3CertificateBuilder(dnName, certSerialNumber, startDate, endDate, dnName, keyPair.getPublic())
                .build(new JcaContentSignerBuilder("SHA256WithRSAEncryption").setProvider(new BouncyCastleProvider()).build(keyPair.getPrivate()));
        SmimeKey emptyDnSmimeKey = new SmimeKey(keyPair.getPrivate(), emptyDnCertificate);
        List<String> emails = emptyDnSmimeKey.getAssociatedAddresses();
        assertTrue(emails.isEmpty());
    }
    @Test(expected = UnsupportedOperationException.class)
    @Category(Categories.valid.class)
    public void testGetAssociatedAddressesReturnsUnmodifiableList() {
        List<String> emails = smimeKey.getAssociatedAddresses();
        emails.add("fail@test.com");
    }
}