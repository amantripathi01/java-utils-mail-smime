/*
 * Copyright (c) 2015 Torsten Krause, Markenwerk GmbH.
 * 
 * This file is part of 'A S/MIME library for JavaMail', hereafter
 * called 'this library', identified by the following coordinates:
 * 
 *    groupID: net.markenwerk
 *    artifactId: utils-mail-smime
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 * 
 * See the LICENSE and NOTICE files in the root directory for further
 * information.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test aman15thMaygitlab using AI Type  and AI Model 

ROOST_METHOD_HASH=containsPrivateKeyAlias_6d4550f3d9
ROOST_METHOD_SIG_HASH=containsPrivateKeyAlias_cb04a7c4b5

"""
Scenario 1: Alias exists in the KeyStore
Details:
  TestName: testAliasExistsInKeyStore
  Description: This test is meant to check if the method correctly identifies when an alias exists in the KeyStore.
Execution:
  Arrange: Create a mock KeyStore with an alias and set it to return true when isKeyEntry is called with this alias.
  Act: Call containsPrivateKeyAlias method with the alias.
  Assert: Check if the method returns true.
Validation: 
  The assertion verifies that the method correctly identifies when an alias exists in the KeyStore. This is important as it allows us to ensure that the correct keys are being used when performing cryptographic operations.

Scenario 2: Alias does not exist in the KeyStore
Details:
  TestName: testAliasDoesNotExistInKeyStore
  Description: This test is meant to check if the method correctly identifies when an alias does not exist in the KeyStore.
Execution:
  Arrange: Create a mock KeyStore without any aliases and set it to return false when isKeyEntry is called.
  Act: Call containsPrivateKeyAlias method with a non-existent alias.
  Assert: Check if the method returns false.
Validation: 
  The assertion verifies that the method correctly identifies when an alias does not exist in the KeyStore. This is important as it allows us to prevent the use of non-existent keys when performing cryptographic operations.

Scenario 3: KeyStore throws an exception
Details:
  TestName: testKeyStoreThrowsException
  Description: This test is meant to check if the method correctly handles exceptions thrown by the KeyStore.
Execution:
  Arrange: Create a mock KeyStore and set it to throw an exception when isKeyEntry is called.
  Act: Call containsPrivateKeyAlias method with any alias.
  Assert: Check if the method throws an SmimeException with the appropriate message.
Validation: 
  The assertion verifies that the method correctly handles exceptions thrown by the KeyStore. This is important as it allows us to handle unexpected situations gracefully and provide meaningful error messages to the users.

Scenario 4: Alias is null
Details:
  TestName: testAliasIsNull
  Description: This test is meant to check how the method handles a null alias.
Execution:
  Arrange: No specific arrangement needed as the alias is null.
  Act: Call containsPrivateKeyAlias method with null as the alias.
  Assert: Check if the method returns false or throws an appropriate exception.
Validation: 
  The assertion verifies how the method handles a null alias. This is important as it allows us to prevent null pointer exceptions and ensure the stability of the application.
"""
*/

// ********RoostGPT********

package net.markenwerk.utils.mail.smime;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import java.security.KeyStore;
import java.io.InputStream;
import java.security.KeyStoreException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;

@RunWith(MockitoJUnitRunner.class)
public class SmimeKeyStoreContainsPrivateKeyAliasTest {
    @Mock
    private KeyStore mockKeyStore;
    @Test
    @Category(Categories.valid.class)
    public void testAliasExistsInKeyStore() throws Exception {
        String alias = "testAlias";
        when(mockKeyStore.isKeyEntry(alias)).thenReturn(true);
        SmimeKeyStore smimeKeyStore = new SmimeKeyStore(null, null);
        smimeKeyStore.keyStore = mockKeyStore;
        assertTrue(smimeKeyStore.containsPrivateKeyAlias(alias));
    }
    @Test
    @Category(Categories.valid.class)
    public void testAliasDoesNotExistInKeyStore() throws Exception {
        String alias = "testAlias";
        when(mockKeyStore.isKeyEntry(alias)).thenReturn(false);
        SmimeKeyStore smimeKeyStore = new SmimeKeyStore(null, null);
        smimeKeyStore.keyStore = mockKeyStore;
        assertFalse(smimeKeyStore.containsPrivateKeyAlias(alias));
    }
    @Test(expected = SmimeException.class)
    @Category(Categories.invalid.class)
    public void testKeyStoreThrowsException() throws Exception {
        String alias = "testAlias";
        when(mockKeyStore.isKeyEntry(alias)).thenThrow(new KeyStoreException());
        SmimeKeyStore smimeKeyStore = new SmimeKeyStore(null, null);
        smimeKeyStore.keyStore = mockKeyStore;
        smimeKeyStore.containsPrivateKeyAlias(alias);
    }
    @Test
    @Category(Categories.invalid.class)
    public void testAliasIsNull() throws Exception {
        when(mockKeyStore.isKeyEntry(null)).thenReturn(false);
        SmimeKeyStore smimeKeyStore = new SmimeKeyStore(null, null);
        smimeKeyStore.keyStore = mockKeyStore;
        assertFalse(smimeKeyStore.containsPrivateKeyAlias(null));
    }
}